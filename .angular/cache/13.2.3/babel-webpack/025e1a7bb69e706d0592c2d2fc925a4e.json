{"ast":null,"code":"import _asyncToGenerator from \"/Users/lvilcarromero/workspace/tera-ui/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nconst NAMESPACE = 'design-system';\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n\n  return false;\n})();\n\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n\nconst createTime = (fnName, tagName = '') => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta);\n  let style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  addStyle(elm.getRootNode(), cmpMeta);\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + cmp.$tagName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  let vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n\n  if (vnodeData) {\n    if (vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n\n    {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    memberName.toLowerCase();\n\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            let n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  let newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n\n  if (!useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n\n    if (newVNode.$tag$ === 'slot') {\n      newVNode.$flags$ |= newVNode.$children$ ? // slot element has fallback content\n      2\n      /* isSlotFallback */\n      : // slot element does not have fallback content\n      1\n      /* isSlotReference */\n      ;\n    }\n  }\n\n  if (newVNode.$flags$ & 1\n  /* isSlotReference */\n  ) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = doc.createTextNode('');\n  } else {\n    // create element\n    elm = newVNode.$elm$ = doc.createElement(newVNode.$flags$ & 2\n    /* isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$); // add css classes, attrs, props, listeners, etc.\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n  }\n\n  {\n    elm['s-hn'] = hostTagName;\n\n    if (newVNode.$flags$ & (2\n    /* isSlotFallback */\n    | 1\n    /* isSlotReference */\n    )) {\n      // remember the content reference comment\n      elm['s-sr'] = true; // remember the content reference comment\n\n      elm['s-cr'] = contentRef; // remember the slot name, or empty string for default slot\n\n      elm['s-sn'] = newVNode.$name$ || ''; // check if we've got an old vnode for this slot\n\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\n\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n  plt.$flags$ |= 1\n  /* isTmpDisconnected */\n  ;\n  const oldSlotChildNodes = parentElm.childNodes;\n\n  for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    const childNode = oldSlotChildNodes[i];\n\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode)); // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n\n  plt.$flags$ &= ~1\n  /* isTmpDisconnected */\n  ;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  let childNode;\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, referenceNode(before));\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      } // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // Vnode moved right\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // Vnode moved left\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    if (vnode1.$tag$ === 'slot') {\n      return vnode1.$name$ === vnode2.$name$;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst referenceNode = node => {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\n\nconst parentReferenceNode = node => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  {\n    // element node\n    {\n      if (tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n  }\n};\n\nconst updateFallbackSlotVisibility = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNodes = elm.childNodes;\n  let childNode;\n  let i;\n  let ilen;\n  let j;\n  let slotNameAttr;\n  let nodeType;\n\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        slotNameAttr = childNode['s-sn']; // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n\n        childNode.hidden = false;\n\n        for (j = 0; j < ilen; j++) {\n          nodeType = childNodes[j].nodeType;\n\n          if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n            // this sibling node is from a different component OR is a named fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            && slotNameAttr === childNodes[j].getAttribute('slot')) {\n              childNode.hidden = true;\n              break;\n            }\n          } else {\n            // this is a default fallback slot node\n            // any element or text node (with content)\n            // should hide the default fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            || nodeType === 3\n            /* TextNode */\n            && childNodes[j].textContent.trim() !== '') {\n              childNode.hidden = true;\n              break;\n            }\n          }\n        }\n      } // keep drilling down\n\n\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\n\nconst relocateNodes = [];\n\nconst relocateSlotContent = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNode;\n  let node;\n  let hostContentNodes;\n  let slotNameAttr;\n  let relocateNodeData;\n  let j;\n  let i = 0;\n  let childNodes = elm.childNodes;\n  let ilen = childNodes.length;\n\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node); // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n\n            if (node['s-sr']) {\n              relocateNodes.map(relocateNode => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      relocateSlotContent(childNode);\n    }\n  }\n};\n\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n  if (nodeToRelocate.nodeType === 1\n  /* ElementNode */\n  ) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n      return true;\n    }\n\n    if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n\n  return slotNameAttr === '';\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm;\n  {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = (cmpMeta.$flags$ & 1\n    /* shadowDomEncapsulation */\n    ) !== 0; // always reset\n\n    checkSlotFallbackVisibility = false;\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n  {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1\n    /* isTmpDisconnected */\n    ;\n\n    if (checkSlotRelocate) {\n      relocateSlotContent(rootVnode.$elm$);\n      let relocateData;\n      let nodeToRelocate;\n      let orgLocationNode;\n      let parentNodeRef;\n      let insertBeforeNode;\n      let refNode;\n      let i = 0;\n\n      for (; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n\n      for (i = 0; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              } // add it back to the dom but in its new home\n\n\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1\n          /* ElementNode */\n          ) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    } // done moving nodes around\n    // allow the disconnect callback to work again\n\n\n    plt.$flags$ &= ~1\n    /* isTmpDisconnected */\n    ; // always reset\n\n    relocateNodes.length = 0;\n  }\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\n\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n    hostRef.$flags$ |= 512\n    /* needsRerender */\n    ;\n    return;\n  }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return writeTask(dispatch);\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (hostRef, instance, isInitialLoad) {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n\n    if (isInitialLoad) {\n      // DOM WRITE!\n      attachStyles(hostRef);\n    }\n\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n      callRender(hostRef, instance);\n    }\n\n    if (rc) {\n      // ok, so turns out there are some child host elements\n      // waiting on this parent element to load\n      // let's fire off all update callbacks waiting\n      rc.map(cb => cb());\n      elm['s-rc'] = undefined;\n    }\n\n    endRender();\n    endUpdate();\n    {\n      const childrenPromises = elm['s-p'];\n\n      const postUpdate = () => postUpdateComponent(hostRef);\n\n      if (childrenPromises.length === 0) {\n        postUpdate();\n      } else {\n        Promise.all(childrenPromises).then(postUpdate);\n        hostRef.$flags$ |= 4\n        /* isWaitingForChildren */\n        ;\n        childrenPromises.length = 0;\n      }\n    }\n  });\n\n  return function updateComponent(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n    {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  return null;\n};\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\n\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n\n    if (propType & 1\n    /* String */\n    ) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && newVal !== oldVal) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    // It's better to have a const than two Object.entries()\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n      const attrNameToPropName = new Map();\n\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName); //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === 'number' && this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          }\n\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      }; // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n\n\n      Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15\n      /* HasAttribute */\n      ) // filter to only keep props that should match attributes\n      .map(([propName, m]) => {\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n        return attrName;\n      });\n    }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32\n    /* hasInitializedComponent */\n    ) === 0) {\n      {\n        // we haven't initialized this element yet\n        hostRef.$flags$ |= 32\n        /* hasInitializedComponent */\n        ; // lazy loaded components\n        // request the component's implementation to be\n        // wired up with the host element\n\n        Cstr = loadModule(cmpMeta);\n\n        if (Cstr.then) {\n          // Await creates a micro-task avoid if possible\n          const endLoad = uniqueTime();\n          Cstr = yield Cstr;\n          endLoad();\n        }\n\n        if (!Cstr.isProxied) {\n          proxyComponent(Cstr, cmpMeta, 2\n          /* proxyState */\n          );\n          Cstr.isProxied = true;\n        }\n\n        const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n        // but let's keep track of when we start and stop\n        // so that the getters/setters don't incorrectly step on data\n\n        {\n          hostRef.$flags$ |= 8\n          /* isConstructingInstance */\n          ;\n        } // construct the lazy-loaded component implementation\n        // passing the hostRef is very important during\n        // construction in order to directly wire together the\n        // host element and the lazy-loaded instance\n\n        try {\n          new Cstr(hostRef);\n        } catch (e) {\n          consoleError(e);\n        }\n\n        {\n          hostRef.$flags$ &= ~8\n          /* isConstructingInstance */\n          ;\n        }\n        endNewInstance();\n      }\n\n      if (Cstr.style) {\n        // this component has styles but we haven't registered them yet\n        let style = Cstr.style;\n        const scopeId = getScopeId(cmpMeta);\n\n        if (!styles.has(scopeId)) {\n          const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n          registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ));\n          endRegisterStyles();\n        }\n      }\n    } // we've successfully created a lazy instance\n\n\n    const ancestorComponent = hostRef.$ancestorComponent$;\n\n    const schedule = () => scheduleUpdate(hostRef, true);\n\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n      // this is the initial load and this component it has an ancestor component\n      // but the ancestor component has NOT fired its will update lifecycle yet\n      // so let's just cool our jets and wait for the ancestor to continue first\n      // this will get fired off when the ancestor component\n      // finally gets around to rendering its lazy self\n      // fire off the initial update\n      ancestorComponent['s-rc'].push(schedule);\n    } else {\n      schedule();\n    }\n  });\n\n  return function initializeComponent(_x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (cmpMeta.$flags$ & (4\n        /* hasSlotRelocation */\n        | 8\n        /* needsShadowDomShim */\n        )) {\n          setContentReference(elm);\n        }\n      }\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    }\n\n    endConnected();\n  }\n};\n\nconst setContentReference = elm => {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  const contentRefElm = elm['s-cr'] = doc.createComment('');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    getHostRef(elm);\n  }\n};\n\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      const tagName = cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n        }\n\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n\n      };\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n        /* isElementConstructor */\n        ));\n      }\n    });\n  });\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (0, console.error)(e, el);\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads); // DOM WRITES!!!\n\n  {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { bootstrapLazy as b, h, promiseResolve as p, registerInstance as r };","map":{"version":3,"sources":["/Users/lvilcarromero/workspace/tera-ui/dist/libs/design-system/dist/esm/index-36156486.js"],"names":["NAMESPACE","contentRef","hostTagName","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","replace","e","HYDRATED_CSS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","scopeId","cssText","allowCS","style","styles","get","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","attachStyles","hostRef","$cmpMeta$","elm","$hostElement$","endAttachStyles","$tagName$","getRootNode","cmp","EMPTY_OBJ","isComplexType","o","nodeName","vnodeData","children","child","slotName","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","push","newVNode","name","classData","className","class","Object","keys","filter","k","join","vnode","$attrs$","$children$","$name$","tag","text","$tag$","$elm$","Host","isHost","node","setAccessor","memberName","oldValue","newValue","isSvg","flags","isProp","isMemberInElement","toLowerCase","classList","oldClasses","parseClassList","newClasses","remove","isComplex","n","getAttribute","removeAttribute","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","createTextNode","appendChild","putBackInOriginalLocation","recursive","oldSlotChildNodes","childNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","parentNode","removeVnodes","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","vnode1","vnode2","oldChildren","newChildren","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","textContent","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","find","r","$nodeToRelocate$","$slotRefNode$","map","relocateNode","some","nodeToRelocate","renderVdom","renderFnResults","$vnode$","rootVnode","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","previousSibling","emitEvent","ev","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","$lazyInstance$","promise","then","updateComponent","endUpdate","rc","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","nextTick","who","documentElement","detail","namespace","thenFn","parsePropertyValue","propValue","propType","getValue","ref","propName","getHostRef","$instanceValues$","setValue","newVal","oldVal","$members$","proxyComponent","Cstr","members","entries","prototype","memberFlags","defineProperty","configurable","enumerable","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","hasOwnProperty","observedAttributes","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","schedule","connectedCallback","endConnected","setContentReference","contentRefElm","createComment","firstChild","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","constructor","self","registerHost","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","setTimeout","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","b","p"],"mappings":"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","sourcesContent":["const NAMESPACE = 'design-system';\n\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    addStyle(elm.getRootNode(), cmpMeta);\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (!useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            doc.createTextNode('');\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, referenceNode(before) );\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    {\n        // element node\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm);\n    {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* Prop */ ||\n                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if ((cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, h, promiseResolve as p, registerInstance as r };\n"]},"metadata":{},"sourceType":"module"}